//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	March 1996

// *************************************************
// MH 98/09/09  This code does not appear to be used
// *************************************************

template <class Label>
void
fm<Label>::cross_product(const fm<Label>& x, const fm<Label> y)
{
	int			i;
	int			j;
	int			k;
	int			l;
	fm<Label>		temp1;
	fm<Label>		temp2;
	state			s1;
	state			s2;
	inst<Label>		t;
	fm<Label>		result;
	fm<Label>		a = x;
	fm<Label>		b = y;
	set<pair<state, state> >	reachable;
	set<pair<state, state> >	wave;
	set<pair<state, state> >	wr;
	set<pair<state, state> >	total;
	pair<state, state>	p;
	set<state>		states1;
	set<state>		states2;

	// do only reachable parts of x and y

	a.reachable_fm();
	a.reverse();
	a.reachable_fm();
	a.reverse();

	b.reachable_fm();
	b.reverse();
	b.reachable_fm();
	b.reverse();

	// clear result 
	clear();

	// get the first wave

	a.starts(states1);
	b.starts(states2);

	for (i=0; i<states1.size(); ++i)
		for (j=0; j<states2.size(); ++j)
		{
			p.assign(states1[i], states2[i]);
			reachable.disjoint_union(p);
		}

	total = reachable;
	// find max state of a

	int max = a.max_state().value() + 1;
	
	// determine the intersection of the alphabets

	set<Label>		alphabet1;
	set<Label>		alphabet2;
	set<Label>		alpha;
	a.labels(alphabet1);
	b.labels(alphabet2);
	alpha.intersect(alphabet1, alphabet2);

	// outer loop while there are reachable states we
	// haven't considered

	for (;;)
	{
		// for each reachable state

		wave.clear();
		for (k=0; k<reachable.size(); ++k)
		{
			// for each alphabetic symbol

			for (i=0;i<alpha.size(); ++i)
			{
			// find instructions using this label

			a.select(alpha[i], reachable[k].get_left(), SOURCE,
				 temp1);
			b.select(alpha[i], reachable[k].get_right(), SOURCE,
				temp2);
	
			// compute cross product

			s1 = reachable[k].get_left().value() + 
				reachable[k].get_right().value() * max;	
			for (j=0; j<temp1.size(); ++j)
				for (l=0; l<temp2.size(); ++l)
				{	
					s2 = temp1[j].get_sink().value() +
					(temp2[l].get_sink().value() * max);
					t.assign(s1, alpha[i], s2);
					result.arcs += t;
					p.assign(temp1[j].get_sink(), 
						temp2[l].get_sink());
					wave += p;
				}
			}
		}
		// if wave contains no new states, we're done

		wr.intersect(wave, total);
		if (wr.size() == wave.size())
			break;
		wave -= wr;
		reachable = wave;
		total.sort();
		wave.sort();
		total.merge(wave);
	}

	// start and final states

	for (i=0; i<a.start_states.size(); ++i)
		for (j=0; j<b.start_states.size(); ++j)
		{
			s1 = a.start_states[i].value() + 
				(b.start_states[j].value() * max);	
			result.start_states += s1;
		} 

	for (i=0; i<a.final_states.size(); ++i)
		for (j=0; j<b.final_states.size(); ++j)
		{
			s2 = a.final_states[i].value() + 
				(b.final_states[j].value() * max);

			result.final_states += s2;
		} 

	*this = result;
}
