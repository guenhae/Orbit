//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1995

// *************************************************
// MH 98/09/09  This code does not appear to be used
// *************************************************

template <class Label>
fm<Label>&
fm<Label>::operator+=(const fm<Label>& a)
{
	int	i;
	int	non_returning = 0;

	// if the start states have no incoming arcs, then
	// you can simply unify them

	set<states>	x;
	set<inst<Label>	y;

	starts(x);
	select(*this, x, SINK, y);
	if (y.size() == 0)
	{
		a.starts(x)
		select(a, x, SINK, y);
		if (y.size() == 0)
			non_returning = 1;
	} 

	
	int	i;

	// find the maximum state value of this

	int max = max_state().value() + 1;

	// append the instructions, renumbering as you go

	for (i=0; i<a.size(); ++i)
	{
		inst<Label>	tmp = a[i];

		// if it's non returning, don't add any of the
		// transitions from start states

		if (non_returning && (x.member(tmp.sourceis()) < 0 )
			continue;
		tmp.renumber(max);
		disjoint_union(tmp);
	}

	// now add the start states. 

	set<state>	s;

	a.starts(s);
	if (non_returning)
	{
		for (int j=0; j<s.size(); ++j)
		{
			select(a, s[j], SOURCE, y);
			for (i=0; i<y.size(); ++i)
				cartesian_product(
		
	}
	else
	{
		for (i=0; i<s.size(); ++i)
		s[i] += max;
		start_states.disjoint_union(s);
	}

	// now add the final states

	a.finals(s);

	for (i=0; i<s.size(); ++i)
		s[i] += max;
	final_states.disjoint_union(s);

	return *this;
}

template <class Label>
fm<Label>&
fm<Label>::operator+=(fm<Label>* a)
{
        // find the maximum state value of this

        int max = max_state().value() + 1;

        // renumber the machine

        a->renumber(max);

        // now just append the set

        disjoint_union(*a);

        return *this;
}

