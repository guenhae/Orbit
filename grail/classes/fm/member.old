//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1993

// *************************************************
// MH 98/09/09  This code does not appear to be used
// *************************************************

template <class Label>
int
fm<Label>::member_of_language(const string<Label>& wd, const int verbose) const
{
	int		j;
	set<state>	end;
	set<state>	temp2;
	fm<Label>	bunch;
	fm<Label>	temp;
	Label		r;

	// begin with start states

	set<state> current = start_states;

	// do for all characters

	for (int i=0; i<wd.size(); ++i)
	{
		r = wd[i];

		// get the target set

		bunch.clear();

		for (j=0; j<current.size(); ++j)
		{
			select(r, current[j], SOURCE, temp);
			bunch.arcs += temp.arcs;
		}

		// if there are no states, return

		if (bunch.size() == 0)
		{
			if (verbose)
			      cout << "no states acccessible on " << r << "\n";
			return 0;
		}

		// else, target set is the new start set

		bunch.sinks(current);

		if (verbose)
			cout << "on " << r << " take instructions\n" << bunch;
	}

	// exhausted the string; now test for a final state in the set

	bunch.sinks(temp2);

	// handle null string

	if (wd.size() == 0)
		temp2 = start_states;

	end.intersect(final_states, temp2);

	if (end.size() != 0)
	{
		if (verbose)
			cout << "terminate on final states " << end << "\n";
		return 1;
	}
	else
		return 0;
}
