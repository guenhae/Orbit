//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1993

/***************************************************************************

  File:  classes/fm/complete.cpp
  -----

  Description:
  ------------
    This file contains the definition of the following function:
      void fm<Label>::complete()

    This function is a public member of the template class fm (declared 
    in classes/fm/fm.h).

  Revision History:
  -----------------
    The Grail Project               Initial version of source code
    M.Hoeberechts  98/09/06         Added header and comments

 ***************************************************************************/




/***************************************************************************

                      void fm<Label>::complete()

  Description:
    This function is a public member of the template class fm (declared 
    in classes/re/fm.h).  This function completes this fm.  After execution,
    there will be arc for each letter in the input alphabet originating from
    each state.  A sink state is added to the machine.

    This function can be called in the following way:
      this_fm.complete();

  Parameters:  none

  Return Value:  none
  
 ***************************************************************************/

template <class Label>
void
fm<Label>::complete()
{
	int			i;
	int			j;
	fm<Label>		temp;	
	set<Label>		alphabet;
	set<state>		all_states;
	inst<Label>		t;
	set<inst<Label> >	additional;	

	// is it complete already?
	if (is_complete())
		return;

	// collect the alphabet
	labels(alphabet);

	// find all states
	states(all_states);

	// create a new state
	state s1 = max_state().value() + 1;

	// it helps to be sorted
	arcs.sort();

	// for each state, add an instruction for any label not
	// otherwise represented
	for (i=0; i<all_states.size(); ++i)
		for (j=0; j<alphabet.size(); ++j)
		{
			select(alphabet[j], all_states[i],  SOURCE, temp);
			if (temp.size() == 0)
			{
				t.assign(all_states[i], alphabet[j], s1);
				additional.disjoint_union(t);
			}
		}

	// add instructions that loop on new state
	for (i=0; i<alphabet.size(); ++i)
	{
		t.assign(s1, alphabet[i], s1);
		additional.disjoint_union(t);
	}

	arcs.disjoint_union(additional);
}
