//	This code copyright (c) by the Grail project.
//	No commercial use permitted without written consent. 
//	December 1995

template <class S>
subexp<S>*
re<S>::term(istream& str)
{
	token_type 	t;
	subexp<S>*	se1;
	re<S>*		tmp;
	S		s;
	char		k;

	// get the token

	t = token(str);

	if (t == eos_t)
	{
		se1 = 0;
		return se1;
	}

	switch(t)
	{
	case rparen_t:
		str >> k;
		break;

	case lparen_t:
		str >> k;
		tmp = parse(str);
		if ((t = token(str)) != rparen_t)
		{
			cout << (char) str.peek() << " illegal at " << str.tellg() << "\n";
			return se1 = 0;
		}
		se1 = tmp->p;
		tmp->p = 0;
		delete tmp;
		str >> k;
		break;

	case estring_t:
		se1 = new empty_string<S>();
		str >> k;
		// str >> k;
		break;

	case eset_t:
		se1 = new empty_set<S>;
		str >> k;
		// str >> k;
		break;
		
	case cat_t:	
	case symbol_t:
		str >> s;
		se1 = new symbol_exp<S>(s);
		break;

	default:
		return se1 = 0;
	}

	// look for optional star(s)

	if (token(str) == star_t)
	{
		star_exp<S>*	se2 = new star_exp<S>;
		se2->left = se1;
		while (token(str) == star_t)
			str >> k;
		return se2;
	}

	return se1;
}
