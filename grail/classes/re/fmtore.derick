//	This code copyright (c) by the Grail project.
//	Commercial use expressly forbidden without 
//	written consent of the Grail project.
//	December 1994

template <class Label>
void
re<Label>::fmtore(fm<Label> f)
{
	int			i;
	int			j;
	int			k;
	int			empty_string = 0;
	state			big;
	re<Label>		r;
	re<Label>		s;
	re<Label>		q;
	inst<re<Label> >	tnew;
	fm<re<Label> >		a;
	set<state>		all_states;
	set<state>		starts;
	set<state>		finals;
	fm<re<Label> >		subfm1;
	fm<re<Label> >		subfm2;
	fm<re<Label> >		subfm3;
	fm<re<Label> >		subfm4;
	re<Label>		middle;
	set<re<Label> >		middles;
	set<re<Label> >		sources;
	set<re<Label> >		sinks;

	// use only the reachable fm

	f.reachable_fm();
	f.starts(starts);
	f.finals(finals);

	clear();

	// if no final states, we're done

	if (finals.size() < 1)
		return;

	// check for empty string

	all_states.intersect(starts, finals);

	if (all_states.size() > 0)
		empty_string = 1;

	f.states(all_states);

	// copy instructions, converting Label to re<Label> 

	for (i=0; i<f.size(); ++i)
	{
		r.make_symbol(f[i].get_label());
		tnew.assign(f[i].get_source(), r, f[i].get_sink());
		a.add_instruction(tnew);
	}

	// convert to `deterministic xfa'
	// (only one re-labelled instruction per pair of states)

	subfm3.clear();

	for (i=0; i<all_states.size(); ++i)
	{
		a.select(all_states[i], SOURCE, subfm1);
		for(;;)
		{
			if (subfm1.size() < 2)
				break;
			subfm1.select(subfm1[0].get_sink(), SINK, subfm2);
	
			if (subfm2.size() < 2)
			{
				subfm1 -= subfm2;
				continue;
			}
	
			r.make_null_exp();
			for (j=0; j<subfm2.size(); ++j)
				r += subfm2[j].get_label();
			tnew.assign(all_states[i], r, subfm1[0].get_sink());
			subfm3.add_instruction(tnew);
			cout << "xfa'ing " << tnew << "\n";
			subfm1 -= subfm2;
		}
	}
	a += subfm3;

	// add a clone start and a clone final

	big = f.max_state().value() + 1;

	for (i=0; i<starts.size(); ++i)
	{
		a.select(starts[i], SOURCE, subfm1);
		for (j=0; j<subfm1.size(); ++j)
		{
			tnew.assign(big, subfm1[j].get_label(), 
				subfm1[j].get_sink());
			cout << "source'ing " << tnew << "\n";
			a.add_instruction(tnew);
		}
	}
	
	big = big.value() + 1;
	
	for (i=0; i<finals.size(); ++i)
	{
		a.select(finals[i], SINK, subfm1);
		for (j=0; j<subfm1.size(); ++j)
		{
			tnew.assign(subfm1[j].get_source(),
				subfm1[j].get_label(), big);
			cout << "sink'ing " << tnew << "\n";
			a.add_instruction(tnew);
		}
	}

	cout << "converted to \n" << a;

	// eliminate each state

	for (i=0; i<all_states.size(); ++i)  
	{
		// get all arcs from or to this state

		a.select(all_states[i], EITHER, subfm1);

		// delete them from machine

		a -= subfm1;

		// compute re of self-looping arcs, avoiding duplicates 

		middle.clear();
		subfm2.clear();
		for (j=0; j<subfm1.size(); ++j)
			if (subfm1[j].get_source() == all_states[i] &&
				subfm1[j].get_sink() == all_states[i]) 
			{
					subfm2.add_instruction(subfm1[j]);
					middle += subfm1[j].get_label();
			}
		middle.star();

		// remove the self loops

		subfm1 -= subfm2;

		// select lead-in and lead-out arcs

		subfm1.select(all_states[i], SOURCE, subfm2);
		subfm1.select(all_states[i], SINK, subfm3);
		
		cout << "subfm2 is " << subfm2;
		cout << "subfm3 is " << subfm3;

		// for each non self-loop, create the re

		for (j=0; j<subfm3.size(); ++j)
		{
			r = subfm3[j].get_label();
			r ^= middle;

			for (k=0; k<subfm2.size(); ++k)
			{
				q = r;
				q ^= subfm2[k].get_label();
				if (q.is_null_exp())
					continue;

				subfm3.select(subfm2[k].get_sink(),SINK,subfm4);
				if (subfm4.size() == 0)
				{
					tnew.assign(subfm3[j].get_source(), q, 
						subfm2[k].get_sink());
					a.add_instruction(tnew);
				}
				else
				{
					q += subfm4[0].get_label();
					tnew.assign(subfm4[0].get_source(),
						q, subfm2[k].get_sink());
					a.add_instruction(tnew);
					a -= subfm4;
				}
			}
		}
	}

	// now compute the final re as union of remaining re's

	for (i=0; i<a.size(); ++i)
		*this += a[i].get_label();

	// add empty string if any start state was also final

	if (empty_string)
		*this += r.make_empty_string();
	
	minimize();
}
